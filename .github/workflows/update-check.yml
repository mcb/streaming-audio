name: "Check for new versions and update latest release and tag."

on:
  schedule:
    - cron: '30 1 1 * *'
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      update_info: ${{ steps.update_available.outputs.result }}
    steps:
      - uses: actions/github-script@v5
        id: apk_version
        with:
          result-encoding: string
          script: |
            const apk_url = "https://git.alpinelinux.org/aports/plain/community/snapcast/APKBUILD"
            const result = await github.request(apk_url)
            const re = /pkgver\=\d+(\.\d+)+/i;
            const found = result.data.match(re);
            
            const apk_version = found[0].replace(/pkgver\=/g, "");
            console.log("Newest version available in APK repository is: " + apk_version);
            return apk_version;
            
      - name: Get latest version from this repository
        id: latest_release_version
        uses: kaliber5/action-get-release@v1
        with:
          token: ${{ github.token }}
          latest: true
      
      - uses: actions/github-script@v5
        id: update_available
        env:
          REPO_VERSION: ${{ steps.latest_release_version.outputs.name }}
          APK_VERSION: ${{ steps.apk_version.outputs.result }} 
        with:
          script: |
            const { REPO_VERSION, APK_VERSION } = process.env;
            const is_avail = (REPO_VERSION.replace(/v/, "").localeCompare(APK_VERSION) !== 0);
            const result_json = {
              "is_avail": is_avail,
              "cur_version": REPO_VERSION.replace(/v/, ""),
              "new_version": APK_VERSION
              };
            console.log("New version available? " + result_json.is_avail + ".");
            console.log(result_json);
            return result_json

  update:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: "Delete version releases tagged with latest"
        if: fromJSON(needs.check.outputs.update_info).is_avail
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 0
          delete_tags: true
          delete_tag_pattern: "latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Create new tag and release"
        if: fromJSON(needs.check.outputs.update_info).is_avail
        uses: avakar/tag-and-release@v1
        with:
          tag_name: latest
          release_name: v${{ fromJSON(needs.check.outputs.update_info).new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  call-workflow-docker-image:
    needs: [check, update]
    if: ${{ fromJSON(needs.check.outputs.update_info).is_avail }}
    uses: ${{ github.repository }}/.github/workflows/docker-image.yml@main
